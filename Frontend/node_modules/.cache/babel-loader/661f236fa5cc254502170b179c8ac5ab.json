{"ast":null,"code":"import _slicedToArray from \"D:\\\\programing\\\\UW_python\\\\foodfinder_2.0\\\\Frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"D:\\\\programing\\\\UW_python\\\\foodfinder_2.0\\\\Frontend\\\\src\\\\components\\\\addfood.js\";\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nvar checkbox = document.querySelector('#isHot');\nfunction Addfood() {\n  // creating foodData object to send to backend\n  var _useState = useState({\n      foodname: ''\n    }),\n    _useState2 = _slicedToArray(_useState, 2),\n    foodData = _useState2[0],\n    setfoodData = _useState2[1]; // creating value to record if ishot btn is checked\n  var _useState3 = useState(false),\n    _useState4 = _slicedToArray(_useState3, 2),\n    ishot = _useState4[0],\n    setishot = _useState4[1]; // function to grab user input for new food\n  var newFood = function newFood(event) {\n    var foodvalue = event.target.value;\n    setfoodData({\n      foodname: foodvalue\n    });\n  };\n  var isHot = function isHot(event) {\n    setishot(true);\n  };\n  var clickAddFood = function clickAddFood() {\n    console.log('the add food btn was clicked');\n    console.log(isHot);\n    // make sure that foodname is not empty\n    if (!foodData.foodname) {\n      console.log('food items cannot be null');\n      window.alert('You must enter in a food item');\n    } else {\n      //debugging\n      console.log(foodData);\n      console.log(\"The new food is \".concat(foodData.foodname));\n      axios.post('/addfood', {\n        foodname: foodData.foodname,\n        ishot: true\n      }).then(function (response) {\n        console.log(response.data);\n        console.log(\"\".concat(response.data, \" has been added to the db\"));\n        window.alert('Your food has been updated');\n      }).catch(function (error) {\n        console.log('the fetch to add food fucked up', error);\n      });\n    }\n  };\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"sectionheader\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }\n  }, \"What food what would you like to add?\")), /*#__PURE__*/React.createElement(\"form\", {\n    className: \"foodForm\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"newfoodItems\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"foodname\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 21\n    }\n  }, \"Add food here\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    id: \"newFood\",\n    name: \"foodname\",\n    onChange: newFood,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"newfoodItems\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"ishot\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 25\n    }\n  }, \"Is this food hot?\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"checkbox\",\n    id: \"isHot\",\n    name: \"ishot\",\n    onChange: isHot,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 25\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"addbtn\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: clickAddFood,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }\n  }, \"Add food\")));\n}\nexport default Addfood;","map":{"version":3,"names":["React","useState","useEffect","axios","checkbox","document","querySelector","Addfood","foodname","foodData","setfoodData","ishot","setishot","newFood","event","foodvalue","target","value","isHot","clickAddFood","console","log","window","alert","post","then","response","data","catch","error"],"sources":["D:/programing/UW_python/foodfinder_2.0/Frontend/src/components/addfood.js"],"sourcesContent":["import React, {useState, useEffect}  from \"react\";\r\nimport axios from \"axios\";\r\nconst checkbox = document.querySelector('#isHot');\r\n\r\nfunction Addfood() {\r\n       \r\n    // creating foodData object to send to backend\r\n    const [foodData, setfoodData] = useState({\r\n        foodname: '',\r\n        \r\n    })\r\n    // creating value to record if ishot btn is checked\r\n    const [ishot, setishot] = useState(false)\r\n\r\n    // function to grab user input for new food\r\n    const newFood = event => {\r\n        const foodvalue = event.target.value\r\n        \r\n        setfoodData({\r\n            foodname: foodvalue\r\n        })\r\n        \r\n    }\r\n\r\n    const isHot = event => {\r\n        setishot(true)\r\n\r\n    }\r\n     \r\n      const clickAddFood = () => {\r\n        console.log('the add food btn was clicked');\r\n        console.log(isHot);\r\n        // make sure that foodname is not empty\r\n        if (!foodData.foodname) {\r\n            console.log('food items cannot be null')\r\n            window.alert('You must enter in a food item')\r\n            \r\n        } else {\r\n        //debugging\r\n        console.log(foodData);\r\n        console.log(`The new food is ${foodData.foodname}`)\r\n        \r\n\r\n        axios.post('/addfood', {\r\n            foodname: foodData.foodname,\r\n            ishot: true,\r\n        })\r\n        \r\n        .then((response) => {\r\n            console.log(response.data)\r\n            console.log(`${response.data} has been added to the db`)\r\n            window.alert('Your food has been updated')\r\n\r\n        })\r\n        .catch((error) => {\r\n\r\n            console.log('the fetch to add food fucked up', error)\r\n        })\r\n    }\r\n\r\n\r\n      }\r\n\r\n\r\n    return (\r\n        <>\r\n        <div className=\"sectionheader\">\r\n            <h1>What food what would you like to add?</h1>\r\n        \r\n        </div>\r\n            <form className=\"foodForm\">\r\n                <div className='newfoodItems'>\r\n                    <label htmlFor=\"foodname\">Add food here</label>\r\n                    <input type=\"text\" id=\"newFood\" name=\"foodname\" onChange={newFood}></input>\r\n                </div>\r\n                <div className='newfoodItems'>\r\n                        <label htmlFor=\"ishot\">Is this food hot?</label>\r\n                        <input type='checkbox' id=\"isHot\" name=\"ishot\" onChange={isHot}></input>\r\n\r\n                </div>\r\n            </form>\r\n            <div className=\"addbtn\">\r\n            <button onClick={clickAddFood}>Add food</button>\r\n            </div>\r\n        </>\r\n\r\n    )\r\n}\r\n\r\n\r\nexport default Addfood;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}